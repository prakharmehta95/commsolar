Sender: LSF System <lsfadmin@eu-a6-013-15>
Subject: Job 167476299: <python COSA_main.py> in cluster <euler> Exited

Job <python COSA_main.py> was submitted from host <eu-login-13> by user <anunezji> in cluster <euler> at Sat Mar 27 12:21:33 2021
Job was executed on host(s) <10*eu-a6-013-15>, in queue <bigmem.120h>, as user <anunezji> in cluster <euler> at Sat Mar 27 16:16:25 2021
</cluster/home/anunezji> was used as the home directory.
</cluster/home/anunezji> was used as the working directory.
Started at Sat Mar 27 16:16:25 2021
Terminated at Sat Mar 27 18:32:37 2021
Results reported at Sat Mar 27 18:32:37 2021

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
python COSA_main.py
------------------------------------------------------------

Exited with exit code 1.

Resource usage summary:

    CPU time :                                   79484.58 sec.
    Max Memory :                                 113169 MB
    Average Memory :                             108061.86 MB
    Total Requested Memory :                     120000.00 MB
    Delta Memory :                               6831.00 MB
    Max Swap :                                   -
    Max Processes :                              15
    Max Threads :                                20
    Run time :                                   8192 sec.
    Turnaround time :                            22264 sec.

The output (if any) follows:

Importing data
= Run exp 1 of 2 =
ZEV_NC
15:16:31
Randomseed:  2072207644
Randomseed:  558083796
Randomseed:  578140008
Randomseed:  -1297464737
Randomseed:  1936609080
Randomseed:  1846573783
Randomseed:  -861333008
Randomseed:  900009197
Randomseed:  494203063
Randomseed:  -1802520833
Randomseed:  -1206395838
Randomseed:  -1523257964
Randomseed:  1083994222
Randomseed:  1328554912
Randomseed:  -35204194
Randomseed:  2002096676
Randomseed:  -415371531
Randomseed:  -1178352934
Randomseed:  -1719146663
Randomseed:  -898371798
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/cluster/apps/python/3.7.1/x86_64/lib64/python3.7/multiprocessing/pool.py", line 121, in worker
    result = (True, func(*args, **kwds))
  File "/cluster/apps/python/3.7.1/x86_64/lib64/python3.7/multiprocessing/pool.py", line 47, in starmapstar
    return list(itertools.starmap(args[0], args[1]))
  File "/cluster/home/anunezji/COSA_Tools/SimulateExperiment.py", line 190, in simulate_run
    sim_model.step()
  File "/cluster/home/anunezji/COSA_Model/SolarAdoptionModel.py", line 344, in step
    self.schedule.step()
  File "/cluster/home/anunezji/COSA_Tools/scheduler.py", line 53, in step
    getattr(self._agents[agent_key], stage)()  # Run stage
  File "/cluster/home/anunezji/COSA_Agent/BuildingAgent.py", line 370, in step_decision
    c_max_npv = self.pick_community_highest_npv(combinations_dict)
  File "/cluster/home/anunezji/COSA_Agent/BuildingAgent.py", line 839, in pick_community_highest_npv
    return k[v.index(max(v))]
  File "/cluster/apps/python/3.7.1/x86_64/lib64/python3.7/site-packages/pandas/core/generic.py", line 1479, in __nonzero__
    .format(self.__class__.__name__))
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "COSA_main.py", line 61, in <module>
    exp_results = run_experiment(sc_inputs, BuildingAgent,         SolarAdoptionModel, agents_info, distances, solar, demand)
  File "/cluster/home/anunezji/COSA_Tools/SimulateExperiment.py", line 152, in run_experiment
    exp_results = p.starmap(simulate_run, run_inputs)
  File "/cluster/apps/python/3.7.1/x86_64/lib64/python3.7/multiprocessing/pool.py", line 298, in starmap
    return self._map_async(func, iterable, starmapstar, chunksize).get()
  File "/cluster/apps/python/3.7.1/x86_64/lib64/python3.7/multiprocessing/pool.py", line 683, in get
    raise self._value
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
